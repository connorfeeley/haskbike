:PROPERTIES:
:header-args: sql
:END:
#+title: README
#+author: Connor Feeley
#+date: 2023-09-10
#+PROPERTY: header-args:sql+ :engine postgres :database haskbike
* Tasks
** DONE [#A] Station status for ~station_id~ = ~7165~
CLOSED: [2023-09-24 Sun 22:13]
Station status API returns a station that isn't returned in the information API.
** TODO Refactor Database.Operations to use a monaidic environment for the connection


** TODO Add test to check foreign key ~`references_`~ works correctly
** TODO Add function to ~Operations~ to query and order by ~last_reported~
#+name: joined-stations
#+begin_src sql
select
       station_information.name,
       station_status.*
from station_status
inner join station_information
on station_status.station_id = station_information.station_id
order by last_reported asc;
#+end_src

#+begin_src sql
select
       station_information.name,
       station_status.*
from station_status
inner join station_information
on station_status.station_id = station_information.station_id
order by last_reported asc
limit 6;
#+end_src

#+RESULTS:
| name                             |  id | station_id | num_bikes_available | num_bikes_disabled | num_docks_available | num_docks_disabled | last_reported       | is_charging_station | status     | is_installed | is_renting | is_returning | traffic | vehicle_docks_available | vehicle_types_available_boost | vehicle_types_available_iconic | vehicle_types_available_efit | vehicle_types_available_efit_g5 |
|----------------------------------+-----+------------+---------------------+--------------------+---------------------+--------------------+---------------------+---------------------+------------+--------------+------------+--------------+---------+-------------------------+-------------------------------+--------------------------------+------------------------------+---------------------------------|
| St. Joseph St / Bay St - SMART   | 459 |       7548 |                  11 |                  0 |                   8 |                  0 | 2023-09-12 18:27:45 | f                   | IN_SERVICE | t            | t          | t            |         |                       8 |                             0 |                             10 |                            0 |                               1 |
| Beverley St / College St         | 148 |       7161 |                   6 |                  0 |                  17 |                  0 | 2023-09-12 18:55:03 | f                   | IN_SERVICE | t            | t          | t            |         |                      17 |                             0 |                              6 |                            0 |                               0 |
| Gerrard St E / Leslie St         | 366 |       7431 |                  20 |                  0 |                   5 |                  0 | 2023-09-12 19:02:56 | f                   | IN_SERVICE | t            | t          | t            |         |                       5 |                             0 |                             20 |                            0 |                               0 |
| Lake Shore Blvd E / Knox Ave     | 274 |       7319 |                   9 |                  0 |                   2 |                  0 | 2023-09-12 19:03:13 | f                   | IN_SERVICE | t            | t          | t            |         |                       2 |                             0 |                              8 |                            0 |                               1 |
| Rosehill Ave / Avoca Ave - SMART | 245 |       7279 |                   0 |                  0 |                  16 |                  0 | 2023-09-12 19:03:51 | f                   | IN_SERVICE | t            | t          | t            |         |                      16 |                             0 |                              0 |                            0 |                               0 |
| Widmer St / King St W            | 609 |       7721 |                   4 |                  0 |                   7 |                  0 | 2023-09-12 19:03:51 | f                   | IN_SERVICE | t            | t          | t            |         |                       7 |                             0 |                              4 |                            0 |                               0 |

** TODO Timestamps in database are 4 hours ahead of local time
#+begin_quote
/Note: times in database are +4 hours ahead of current local time (since we're in UTC -4)./
#+end_quote

** TODO [#A] Query: max count and min count of e-bikes across system
:LOGBOOK:
CLOCK: [2023-09-24 Sun 22:12]--[2023-09-24 Sun 22:18] =>  0:06
:END:

** DONE Convert ~VehicleType~ to enumeration
CLOSED: [2023-09-24 Sun 22:43]
:LOGBOOK:
CLOCK: [2023-09-24 Sun 22:18]--[2023-09-24 Sun 22:43] =>  0:25
:END:

** TODO Interesting article
[[https://notes.mikejarrett.ca/tracking-bikeshare-use-using-gbfs-feeds/][Tracking bikeshare use using GBFS feeds | Mike Jarrett]]
** TODO View

#+name: select-view
#+begin_src sql :noeval
station_information.name,
station_status.id, station_status.station_id,
num_bikes_available, num_bikes_disabled, num_docks_available, num_docks_disabled,
last_reported, station_status.is_charging_station, status,
is_installed, is_renting, is_returning,
-- traffic, vehicle_docks_available,
vehicle_types_available_boost, vehicle_types_available_iconic, vehicle_types_available_efit, vehicle_types_available_efit_g5
#+end_src

#+name: columns-view
#+begin_src sql :noeval
name,
id, s_id,
"#bk_avl", "#bk_dis", "#dk_avl", "#d_dis",
"last_reported", "chrg", "status",
"inst", "rent", "retr",
-- "traf", "d_a",
"boost", "iconic", "efit", "efit_5g"

#+end_src

Create view:
#+begin_src sql :results none
DROP VIEW IF EXISTS station_view;
CREATE VIEW station_view (
        <<columns-view>>
)
AS
        SELECT
                <<select-view>>
        FROM station_status
        INNER JOIN station_information
        ON station_status.station_id = station_information.station_id
        ;
#+end_src

Create view:
#+begin_src sql
SELECT *
FROM
        station_view
WHERE
        -- chrg = TRUE
        name LIKE 'Wellesley Station Green P'
        -- "#d_a" != "d_a"
ORDER BY last_reported ASC
;
#+end_src

#+RESULTS:
| name                      | id | s_id | #bk_avl | #bk_dis | #dk_avl | #d_dis | last_reported       | chrg | status     | inst | rent | retr | boost | iconic | efit | efit_5g |
|---------------------------+----+------+---------+---------+---------+--------+---------------------+------+------------+------+------+------+-------+--------+------+---------|
| Wellesley Station Green P |  2 | 7001 |       7 |      13 |       3 |      0 | 2023-09-12 19:02:28 | t    | IN_SERVICE | t    | t    | t    |     0 |      7 |    0 |       0 |
* Views

Create view:
#+begin_src sql :results none
DROP VIEW IF EXISTS station_view;
CREATE VIEW station_view (
        <<columns-view>>
)
AS
        SELECT
                <<select-view>>
        FROM station_status
        INNER JOIN station_information
        ON station_status.station_id = station_information.station_id
        WHERE (vehicle_types_available_boost + vehicle_types_available_iconic + vehicle_types_available_efit + vehicle_types_available_efit_g5 != num_bikes_available)
        ;
#+end_src
* Queries
#+begin_src sql
SELECT
  "t0"."id" AS "res0",
  "t0"."station_id" AS "res1",
  "t0"."name" AS "res2",
  "t0"."physical_configuration" AS "res3",
  "t0"."lat" AS "res4",
  "t0"."lon" AS "res5",
  "t0"."altitude" AS "res6",
  "t0"."address" AS "res7",
  "t0"."capacity" AS "res8",
  "t0"."is_charging_station" AS "res9",
  "t0"."rental_methods" AS "res10",
  "t0"."is_virtual_station" AS "res11",
  "t0"."groups" AS "res12",
  "t0"."obcn" AS "res13",
  "t0"."nearby_distance" AS "res14",
  "t0"."bluetooth_id" AS "res15",
  "t0"."ride_code_support" AS "res16",
  "t1"."id" AS "res17",
  "t1"."station_id" AS "res18",
  "t1"."num_bikes_available" AS "res19",
  "t1"."num_bikes_disabled" AS "res20",
  "t1"."num_docks_available" AS "res21",
  "t1"."num_docks_disabled" AS "res22",
  "t1"."last_reported" AS "res23",
  "t1"."is_charging_station" AS "res24",
  "t1"."status" AS "res25",
  "t1"."is_installed" AS "res26",
  "t1"."is_renting" AS "res27",
  "t1"."is_returning" AS "res28",
  "t1"."traffic" AS "res29",
  "t1"."vehicle_docks_available" AS "res30",
  "t1"."vehicle_types_available_boost" AS "res31",
  "t1"."vehicle_types_available_iconic" AS "res32",
  "t1"."vehicle_types_available_efit" AS "res33",
  "t1"."vehicle_types_available_efit_g5" AS "res34"
FROM
  "station_information" AS "t0" CROSS
  JOIN "station_status" AS "t1"
WHERE
  (
    ("t1"."station_id") = ("t0"."id")
  )
  -- AND (
  --   ("t0"."station_id") IN (
  --     7502, 7109, 7546, 7437, 7148, 7000, 7165,
  --     7001, 7015
  --   )
  -- )
LIMIT 6
#+end_src

#+RESULTS:
| res0 | res1 | res2 | res3 | res4 | res5 | res6 | res7 | res8 | res9 | res10 | res11 | res12 | res13 | res14 | res15 | res16 | res17 | res18 | res19 | res20 | res21 | res22 | res23 | res24 | res25 | res26 | res27 | res28 | res29 | res30 | res31 | res32 | res33 | res34 |
|------+------+------+------+------+------+------+------+------+------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------|
** Get Table Size

#+begin_src sql
SELECT pg_size_pretty( pg_total_relation_size('station_status') );
#+end_src

#+RESULTS:
| pg_size_pretty |
|----------------|
| 1608 kB        |

** Get number of station status rows

/Note: using production database here./
#+begin_src sql :database haskbike
SELECT COUNT(id) FROM station_status;
#+end_src

#+RESULTS:
| count |
|-------|
|  1601 |

** Get table size and number of rows at same time

#+begin_src sql :database haskbike
SELECT pg_size_pretty( pg_total_relation_size('station_status') ); SELECT COUNT(id) FROM station_status;
#+end_src
** Create read-only user for AWS RDS
#+begin_src sql :noeval
--
-- Read only
--

-- Create a group
CREATE ROLE postgres_ro_group;

-- Grant access to existing tables
GRANT USAGE ON SCHEMA public TO postgres_ro_group;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO postgres_ro_group;
GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO postgres_ro_group;

-- Grant access to future tables
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO postgres_ro_group;

-- Create a final user with password
CREATE USER postgres_ro WITH PASSWORD 'secret';
GRANT postgres_ro_group TO postgres_ro;

ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON SEQUENCES TO postgres_ro_group;

-- Allow reading stats
GRANT pg_read_all_stats to postgres_ro;

--
-- Superuser
--

-- Create a final user with password
CREATE USER postgres_adm WITH PASSWORD 'secret';
GRANT rds_superuser to postgres_adm;
#+end_src

* Lenses
** Extract station IDs from ~[StationStatus]~
#+begin_src haskell
λ> ((mapped %~ (status_last_reported)) <$> stations)^.traverse
[7502,7109,7546,7437,7148,7000,7165,7001,7015]
#+end_src
** Extract ~last_reported~ from ~[StationStatus]~
#+begin_src haskell
λ> catMaybes $ ((mapped %~ (status_last_reported)) <$> stations)^.traverse
[1694211245,1694211368,1694211321,1694211210,1694211390,1694211379,1694211227,1694211346]
#+end_src
** Traversal
#+begin_src haskell
λ> ((mapped %~ (status_last_reported)) <$> (status_stations <$> testValuesStatus))^.traverse
[Just 1694211245,Just 1694211368,Just 1694211321,Just 1694211210,Just 1694211390,Just 1694211379,Nothing,Just 1694211227,Just 1694211346]

λ> ((mapped %~ status_last_reported) <$> (status_stations <$> testValuesStatus)) ^. traversed  & each %~ id
[Just 1694211245,Just 1694211368,Just 1694211321,Just 1694211210,Just 1694211390,Just 1694211379,Nothing,Just 1694211227,Just 1694211346]

λ> (((mapped %~ status_last_reported) <$> (status_stations <$> testValuesStatus)) ^. traversed) & catMaybes
[1694211245,1694211368,1694211321,1694211210,1694211390,1694211379,1694211227,1694211346]
#+end_src

* Useful Commands
** Run Tests (Showing all Output)

#+begin_src shell :noeval
cabal test --test-show-details=direct
#+end_src
** Specific Test

#+begin_src shell
cabal test --test-show-details=direct --test-options='--pattern /queryStationStatusBetween/'
#+end_src

#+RESULTS:

** Update Dependencies

#+begin_src shell :noeval
cabal freeze --enable-tests --upgrade-dependencies --allow-newer=aeson
#+end_src

** Query Database

#+begin_src shell :noeval
psql -d haskbike -c "SELECT * FROM station_information"
#+end_src

** Start Postgres on MacOS

#+begin_src shell
pg_ctl -D '/opt/homebrew/var/postgresql@14/' -l /tmp/logfile start
#+end_src

** Initialize Postgres Directory

#+begin_src shell
initdb -D '/opt/homebrew/var/postgresql@15/'
createuser -s postgres
#+end_src

** Create Database

#+begin_src shell :noeval
createdb haskbike
createdb haskbike-test
#+end_src

** Create Database Dump

#+begin_src shell
pg_dump -h "$HASKBIKE_PGDBHOST" -p "$HASKBIKE_PGDBPORT" -U "$HASKBIKE_USERNAME" -Fc -b -v -f "$(date +%Y-%m-%d-%H-%M)-dump.sql" -d haskbike
#+end_src

** Import Database Dump

#+begin_src shell
pg_restore -v -h <hostname> -U <username> -d <database_name> -j 2 <dumpfilelocation.sql> --clean --create
#+end_src

** Load completions
With ~haskbike~ in =PATH=:

Zsh:
#+begin_src zsh
eval "$(haskbike --zsh-completion-script haskbike)"
# or
autoload bashcompinit && bashcompinit
eval "$(haskbike --bash-completion-script haskbike)"
#+end_src

Bash:
#+begin_src bash
eval "$(haskbike --bash-completion-script haskbike)"
#+end_src

/Note: can be added to =PATH= by adding ~PATH_add dist-newstyle/build/*/ghc-*/haskbike-*/x/haskbike/build/haskbike~ to ~.envrc~./

** Migrations
*** Added ~station_information.active~ column
#+begin_src sql
ALTER TABLE station_information
ADD COLUMN active BOOLEAN NOT NULL DEFAULT true;

ALTER TABLE station_information
ADD COLUMN is_valet_station BOOLEAN NOT NULL DEFAULT false;

ALTER TABLE station_information
ADD COLUMN rental_uris character varying(100)[] NOT NULL DEFAULT '{"", "", ""}';
#+end_src
